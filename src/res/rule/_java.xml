<?xml version="1.1" encoding="UTF-8"?>
<tns:root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="invar.template _template.xsd"
	xmlns:tns="invar.template" language="csharp">
	<!-- Redefine 14 Invar buildin types to adapt Java language  -->
	<!-- & &amp; < &lt; > &gt; " &quot; ' &apos; -->
	<redefine>
		<int8 pack="java.lang" type="Byte" construct="-1" />
		<int16 pack="java.lang" type="Short" construct="-1" />
		<int32 pack="java.lang" type="Integer" construct="-1" />
		<int64 pack="java.lang" type="Long" construct="-1L" />
		<uint8 pack="java.lang" type="Short" construct="0" />
		<uint16 pack="java.lang" type="Integer" construct="0" />
		<uint32 pack="java.lang" type="Long" construct="0L" />
		<uint64 pack="java.lang" type="String" construct="&quot;&quot;" />
		<float pack="java.lang" type="Float" construct="0.0F" />
		<double pack="java.lang" type="Double" construct="0.00" />
		<string pack="java.lang" type="String" construct="&quot;&quot;" />
		<bool pack="java.lang" type="Boolean" construct="false" />
		<vec pack="java.util" type="LinkedList" generic="&lt;?&gt;" construct="" />
		<map pack="java.util" type="LinkedHashMap" generic="&lt;?,?&gt;" construct="" />
	</redefine>

	<template key="import"><![CDATA[import (#pack).(#name);(#brk)]]></template>
	<template key="doc"><![CDATA[/** (#doc) */]]></template>
	<template key="doc.line"><![CDATA[// (#doc)]]></template>
	<template key="init.struct"><![CDATA[new (#type)()]]></template>
	<template key="init.enum"><![CDATA[(#type).(#name)]]></template>
	<template key="pack">
		<![CDATA[
   		// THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
   		package (#name);(#brk)(#import)
   		(#block)
		]]>
	</template>

	<template key="enum.field"><![CDATA[(#brk)(#tab)(#doc) (#name) ((#value), "(#name)"),]]></template>
	<template key="enum"><![CDATA[
		public enum (#name)
		{   (#block);
			(#blank)
    		(#tab)public String  getName  () { return name; }
    		(#tab)public Integer getValue () { return value; }
    		(#tab)public String  toString () { return name + "(" + value + ")"; }
    		(#blank)
    		(#tab)private String  name;
    		(#tab)private Integer value;
    		(#blank)
    		(#tab)(#name)(Integer v, String n)
			(#tab){
			(#tab)(#tab)this.name = n;
			(#tab)(#tab)this.value = v;
			(#tab)}
		}
	]]></template>

	<template key="struct"><![CDATA[
		public final class (#name)
		{
			(#block)
		}
	]]></template>
	<template key="struct.meta"><![CDATA[@invar.InvarRule(T="(#type)", S="(#name)")]]></template>
	<template key="struct.field"><![CDATA[(#tab)private (#type) (#name) = (#value);(#doc)(#brk)]]></template>
	<template key="struct.setter"><![CDATA[
		(#tab)(#doc)
		(#tab)(#meta)
    	(#tab)public (#typehost) set(#nameupper)((#type) value) {this.(#name) = value; return this;}
	]]></template>
	<template key="struct.getter"><![CDATA[
		(#tab)(#doc)
		(#tab)(#meta)
    	(#tab)public (#type) get(#nameupper)() {return (#name);}
	]]></template>


</tns:root>
