<?xml version="1.1" encoding="UTF-8"?>
<tns:root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="invar.template _template.xsd"
	xmlns:tns="invar.template" language="csharp">

	<!-- Redefine 14 Invar buildin types to adapt C# language  -->
	<redefine>
		<int8 pack="System" type="SByte" construct="-1" />
		<int16 pack="System" type="Int16" construct="-1" />
		<int32 pack="System" type="Int32" construct="-1" />
		<int64 pack="System" type="Int64" construct="-1L" />
		<uint8 pack="System" type="Byte" construct="0" />
		<uint16 pack="System" type="UInt16" construct="0" />
		<uint32 pack="System" type="UInt32" construct="0" />
		<uint64 pack="System" type="UInt64" construct="0L" />
		<float pack="System" type="Single" construct="0.0F" />
		<double pack="System" type="Double" construct="0.00" />
		<string pack="System" type="String" construct="String.Empty" />
		<bool pack="System" type="Boolean" construct="false" />
		<vec pack="System" type="List" generic="&lt;?&gt;" construct=""/>
		<map pack="System" type="Dictionary" generic="&lt;?,?&gt;" construct="" />
	</redefine>

	<template key="doc"><![CDATA[/// (#doc)]]></template>
	<template key="doc.line"><![CDATA[// (#doc)]]></template>
	<template key="import"><![CDATA[using (#pack);(#brk)]]></template>
	<template key="init.struct"><![CDATA[new (#type)()]]></template>
	<template key="init.enum"><![CDATA[(#type).(#name)]]></template>

	<template key="pack"><![CDATA[
   		// THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
   		(#import)
   		namespace (#name) { 
	 		(#brk)(#block)} // EOF (#name)
	]]></template>

	<template key="enum"><![CDATA[
		public enum (#name)
		{
			(#block)
		} // EOF (#name)
	]]></template>
	<template key="enum.field"><![CDATA[
		(#brk)(#tab)(#doc)
		(#tab)(#name) = (#value),
	]]></template>

	<template key="struct"><![CDATA[
		public sealed class (#name)
		{
			(#block)
		}
	]]></template>
	<template key="struct.meta"><![CDATA[//@InvarRule(T="(#type)", S="(#name)")]]></template>
	<template key="struct.field"><![CDATA[(#tab)private (#type) (#name) = (#value);(#doc)(#brk)]]></template>
	<template key="struct.setter"><![CDATA[
		(#tab)(#doc)
		(#tab)(#meta)
    	(#tab)public (#typehost) set(#nameupper)((#type) value) {this.(#name) = value; return this;}
	]]></template>
	<template key="struct.getter"><![CDATA[
		(#tab)(#doc)
		(#tab)(#meta)
    	(#tab)public (#type) get(#nameupper)() {return (#name);}
	]]></template>


</tns:root>
