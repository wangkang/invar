<?xml version="1.1" encoding="UTF-8"?>
<tns:root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="invar.template ../snippet.xsd"
  xmlns:tns="invar.template" language="java">
  <export resPath="/res/java/InvarReadData.txt" destDir="invar" destName="InvarReadData.java"/>
  <export resPath="/res/java/InvarRule.txt" destDir="invar" destName="InvarRule.java"/>
  
  <!-- Redefine 14 Invar buildin types to adapt Java language  -->
  <!-- & &amp; < &lt; > &gt; " &quot; ' &apos; -->
  <redefine>
    <int8 pack="java.lang" type="Byte" initValue="-1"/>
    <int16 pack="java.lang" type="Short" initValue="-1"/>
    <int32 pack="java.lang" type="Integer" initValue="-1"/>
    <int64 pack="java.lang" type="Long" initValue="-1" initSuffix="L"/>
    <uint8 pack="java.lang" type="Integer" initValue="0"/>
    <uint16 pack="java.lang" type="Integer" initValue="0"/>
    <uint32 pack="java.lang" type="Long" initValue="0" initSuffix="L"/>
    <uint64 pack="java.lang" type="Long" initValue="0" initSuffix="L"/>
    <float pack="java.lang" type="Float" initValue="0.0" initSuffix="F"/>
    <double pack="java.lang" type="Double" initValue="0.00"/>
    <string pack="java.lang" type="String" initValue="&quot;&quot;" initPrefix="&quot;" initSuffix="&quot;"/>
    <bool pack="java.lang" type="Boolean" initValue="false"/>
    <vec pack="java.util" type="LinkedList" generic="&lt;?&gt;" initValue=""/>
    <map pack="java.util" type="LinkedHashMap" generic="&lt;?,?&gt;" initValue=""/>
  </redefine>
  <template key="import"><![CDATA[import (#pack)(#name);]]></template>
  <template key="import.split"><![CDATA[.]]></template>
  <template key="doc"><![CDATA[/** (#doc) */]]></template>
  <template key="doc.line"><![CDATA[// (#doc)]]></template>
  <template key="init.struct"><![CDATA[new (#type)()]]></template>
  <template key="init.enum"><![CDATA[(#type).(#name)]]></template>
  <template key="code.assignment"><![CDATA[(#type)(#name) = (#value);]]></template>
  <template key="code.indexer"><![CDATA[ (#name).get((#index)) ]]></template>
  <template key="pack"><![CDATA[
    // THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
    package (#name);(#brk)(#import)
    (#body)
  ]]></template>
  <template key="enum.field"><![CDATA[
    (#brk)(#tab)(#doc)
    (#tab)(#name) ((#value), "(#name)"),]]></template>
  <template key="enum"><![CDATA[
    public enum (#name)
    {(#body);
    (#blank)
    (#tab)public String  getName  () { return name; }
    (#tab)public Integer getValue () { return value; }
    (#tab)public String  toString () { return name + "(" + value + ")"; }
    (#blank)
    (#tab)private String  name;
    (#tab)private Integer value;
    (#blank)
    (#tab)(#name)(Integer v, String n)
    (#tab){
    (#tab)(#tab)this.name = n;
    (#tab)(#tab)this.value = v;
    (#tab)}
    (#blank)
    (#tab)static public (#name) valueOf(Integer v)
    (#tab){
    (#tab)(#tab)(#name)[] es = (#name).values();
    (#tab)(#tab)for ((#name) e : es)
    (#tab)(#tab){
    (#tab)(#tab)(#tab)if(e.getValue() == v)
    (#tab)(#tab)(#tab)(#tab)return e;
    (#tab)(#tab)}
    (#tab)(#tab)return es[0];
    (#tab)}
    }
  ]]></template>
  <template key="struct"><![CDATA[
    public final class (#name)
    {
    (#body)
    }
	]]></template>
  <template key="struct.meta"><![CDATA[@invar.InvarRule(T="(#type)", S="(#name)")]]></template>
  <template key="struct.field"><![CDATA[(#tab)private (#type) (#name) = (#value);(#doc)(#brk)]]></template>
  <template key="struct.setter"><![CDATA[
    (#tab)(#doc)
    (#tab)(#meta)
    (#tab)public (#typehost) set(#nameupper)((#type) value) {this.(#name) = value; return this;}
  ]]></template>
  <template key="struct.getter"><![CDATA[
    (#tab)(#doc)
    (#tab)(#meta)
    (#tab)public (#type) get(#nameupper)() {return (#name);}
  ]]></template>
  <template key="runtime.pack"><![CDATA[invar]]></template>
  <template key="runtime.name"><![CDATA[InvarRuntime]]></template>
  <template key="runtime.alias"><![CDATA[
    (#tab)static private LinkedHashMap<String,Class<?>> (#name) ()
    (#tab){
    (#tab)(#tab)LinkedHashMap<String,Class<?>> map = new LinkedHashMap<String,Class<?>>();(#body)
    (#tab)(#tab)return map;
    (#tab)}
  ]]></template>
  <template key="runtime.alias.basic"><![CDATA[(#brk)(#tab)(#tab)map.put("(#name)", (#type).class);]]></template>
  <template key="runtime.alias.list"><![CDATA[(#brk)(#tab)(#tab)map.put("(#name)", (#type).class);]]></template>
  <template key="runtime.alias.map"><![CDATA[(#brk)(#tab)(#tab)map.put("(#name)", (#type).class);]]></template>
  <template key="runtime.body"><![CDATA[
    (#tab)static public InvarReadData MakeXmlReader()
    (#tab){
    (#tab)(#tab)if (InvarReadData.aliasBasics == null)
    (#tab)(#tab){
    (#tab)(#tab)(#tab)InvarReadData.aliasBasics = aliasBasic();
    (#tab)(#tab)(#tab)InvarReadData.aliasEnums = aliasEnum();
    (#tab)(#tab)(#tab)InvarReadData.aliasStructs = aliasStruct();
    (#tab)(#tab)}
    (#tab)(#tab) return new InvarReadData();
    (#tab)}
    (#body)
  ]]></template>
  
  <!-- Read bytes from a Stream -->
  <template key="read.import"><![CDATA[java.io::DataInput,java.io::IOException]]></template>
  <template key="read.method"><![CDATA[
  (#tab)public (#type) read(DataInput input) throws IOException
  (#tab){(#body)
  (#tab)(#tab)return this;
  (#tab)}
  ]]></template>
  <template key="read.int8"><![CDATA[(#name) = input.readByte();]]></template>
  <template key="read.int16"><![CDATA[(#name) = input.readShort();]]></template>
  <template key="read.int32"><![CDATA[(#name) = input.readInt();]]></template>
  <template key="read.int64"><![CDATA[(#name) = input.readLong();]]></template>
  <template key="read.uint8"><![CDATA[(#name) = input.readUnsignedByte();]]></template>
  <template key="read.uint16"><![CDATA[(#name) = input.readUnsignedShort();]]></template>
  <template key="read.uint32"><![CDATA[(#name) = input.readInt() & 0xFFFFFFFFL;]]></template>
  <template key="read.uint64"><![CDATA[(#name) = input.readLong();]]></template>
  <template key="read.float"><![CDATA[(#name) = input.readFloat();]]></template>
  <template key="read.double"><![CDATA[(#name) = input.readDouble();]]></template>
  <template key="read.string"><![CDATA[(#name) = input.readUTF();]]></template>
  <template key="read.bool"><![CDATA[(#name) = input.readBoolean();]]></template>
  <template key="read.enum"><![CDATA[(#name) = (#type).valueOf(input.readInt());]]></template>
  <template key="read.struct"><![CDATA[(#name).read(input);]]></template>
  <template key="read.struct.check"><![CDATA[
  if (input.readUnsignedByte() == 0x01)
  {
  (#tab)if ((#name) == null)
  (#tab)(#tab)(#name) = new (#type)();
  (#tab)(#name).read(input);
  }
  ]]></template>
  <template key="read.size.init"><![CDATA[input.readInt();]]></template>
  <template key="read.vec"><![CDATA[(#name).add((#value));]]></template>
  <template key="read.map"><![CDATA[(#nameupper).put((#name),(#value));]]></template>
  <template key="read.vec.for"><![CDATA[
  Integer (#len) = input.readInt();
  for ((#sizetype) (#index) = 0; (#index) < (#len); (#index)++)
  {(#body)
  (#tab)(#name).add((#value));
  }
  ]]></template>
  <template key="read.map.keys"><![CDATA[]]>
  </template>
  <template key="read.map.for"><![CDATA[
  Integer (#len) = input.readInt();
  for ((#sizetype) (#index) = 0; (#index) < (#len); (#index)++)
  {(#body)
  (#tab)(#name).put((#key),(#value));
  }
  ]]></template>
  
  
  <!-- Write bytes to a Stream -->
  <template key="write.import"><![CDATA[java.io::DataOutput,java.io::IOException]]></template>
  <template key="write.method"><![CDATA[
  (#tab)public (#type) write(DataOutput output) throws IOException
  (#tab){(#body)
  (#tab)(#tab)return this;
  (#tab)}
  ]]></template>
  <template key="write.int8"><![CDATA[output.writeByte((#name));]]></template>
  <template key="write.int16"><![CDATA[output.writeShort((#name));]]></template>
  <template key="write.int32"><![CDATA[output.writeInt((#name));]]></template>
  <template key="write.int64"><![CDATA[output.writeLong((#name));]]></template>
  <template key="write.uint8"><![CDATA[output.writeByte((#name));]]></template>
  <template key="write.uint16"><![CDATA[output.writeShort((#name));]]></template>
  <template key="write.uint32"><![CDATA[output.writeInt((#name).intValue());]]></template>
  <template key="write.uint64"><![CDATA[output.writeLong((#name));]]></template>
  <template key="write.float"><![CDATA[output.writeFloat((#name));]]></template>
  <template key="write.double"><![CDATA[output.writeDouble((#name));]]></template>
  <template key="write.string"><![CDATA[output.writeUTF((#name));]]></template>
  <template key="write.bool"><![CDATA[output.writeBoolean((#name));]]></template>
  <template key="write.enum"><![CDATA[output.writeInt((#name).getValue());]]></template>
  <template key="write.struct"><![CDATA[(#name).write(output);]]></template>
  <template key="write.struct.check"><![CDATA[
  if ((#name) != null)
  {
  (#tab)output.writeByte(0x01);
  (#tab)(#name).write(output);
  }
  else
  {
  (#tab)output.writeByte(0x00);
  }
  ]]></template>
  <template key="write.size.init"><![CDATA[(#name).Count]]></template>
  <template key="write.vec.for"><![CDATA[
  Integer (#len) = (#name).size();
  output.writeInt((#len));
  for ((#sizetype) (#index) = 0; (#index) < (#len); (#index)++)
  {(#body)
  }
  ]]></template>
  <template key="write.map.keys"><![CDATA[Keys]]></template>
  <template key="write.map.for"><![CDATA[
  Integer (#len) = (#nameupper).size();
  output.writeInt((#len));
  for ((#type) (#name) : (#nameupper).keySet())
  {(#body)
  }
  ]]></template>
  
  
  <!-- Output data to xml -->
  <template key="toxml.import"><![CDATA[]]></template>
  <template key="toxml.method"><![CDATA[
  (#tab)public (#type) ToXML(String nodeName)
  (#tab){
  (#tab)(#tab)StringBuilder code = new StringBuilder ();
  (#body)
  (#tab)(#tab)return code.toString();
  (#tab)}
  ]]></template>
</tns:root>