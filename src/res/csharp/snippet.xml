<?xml version="1.1" encoding="UTF-8"?>
<tns:root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="invar.template ../snippet.xsd"
	xmlns:tns="invar.template" language="csharp">

	<export resPath="/res/csharp/InvarReadData.cs" destDir="Invar" destName="InvarReadData.cs"/>
	<export resPath="/res/csharp/InvarRule.cs" destDir="Invar" destName="InvarRule.cs"/>

	<!-- Redefine 14 Invar buildin types to adapt C# language  -->
	<redefine>
		<int8 pack="System" type="SByte" initValue="-1"/>
		<int16 pack="System" type="Int16" initValue="-1"/>
		<int32 pack="System" type="Int32" initValue="-1"/>
		<int64 pack="System" type="Int64" initValue="-1" initSuffix="L"/>
		<uint8 pack="System" type="Byte" initValue="0"/>
		<uint16 pack="System" type="UInt16" initValue="0"/>
		<uint32 pack="System" type="UInt32" initValue="0"/>
		<uint64 pack="System" type="UInt64" initValue="0" initSuffix="L"/>
		<float pack="System" type="Single" initValue="0.0" initSuffix="F"/>
		<double pack="System" type="Double" initValue="0.00"/>
		<string pack="System" type="String" initValue="" initPrefix="&quot;" initSuffix="&quot;"/>
		<bool pack="System" type="Boolean" initValue="false"/>
		<vec pack="System.Collections.Generic" type="List" generic="&lt;?&gt;" initValue=""/>
		<map pack="System.Collections.Generic" type="Dictionary" generic="&lt;?,?&gt;" initValue=""/>
	</redefine>

	<template key="doc"><![CDATA[/// (#doc).]]></template>
	<template key="doc.line"><![CDATA[// (#doc).]]></template>
	<template key="import"><![CDATA[using (#pack);(#brk)]]></template>
	<template key="init.struct"><![CDATA[new (#type)()]]></template>
	<template key="init.enum"><![CDATA[(#type).(#name)]]></template>

	<template key="pack"><![CDATA[
   		// THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
   		(#import)
   		namespace (#name) { 
	 		(#block)} // namespace (#name)
	]]></template>

	<template key="enum"><![CDATA[
	    (#brk)(#doc)
		public enum (#name) : int
		{
			(#block)
		} // enum (#name)
	]]></template>
	<template key="enum.field"><![CDATA[
		(#brk)(#tab)(#doc)
		(#tab)(#name) = (#value),
	]]></template>

	<template key="struct"><![CDATA[
	    (#brk)(#doc)
		public sealed class (#name)
		{
			(#block)
		} // class (#name)
	]]></template>
	<template key="struct.meta"><![CDATA[ [Invar.InvarRule("(#type)", "(#name)")] ]]></template>
	<template key="struct.field"><![CDATA[ (#tab)private (#type) (#name) = (#value);(#doc)(#brk) ]]></template>
	<template key="struct.setter"><![CDATA[
		(#brk)(#tab)(#doc)
		(#tab)(#meta)
    	(#tab)public (#typehost) Set(#nameupper)((#type) value) {this.(#name) = value; return this;}
	]]></template>
	<template key="struct.getter"><![CDATA[
		(#brk)(#tab)(#doc)
		(#tab)(#meta)
    	(#tab)public (#type) Get(#nameupper)() {return (#name);}
	]]></template>

	<template key="runtime.pack"><![CDATA[Invar]]></template>
	<template key="runtime.name"><![CDATA[InvarRuntime]]></template>
	<template key="runtime.alias"><![CDATA[
    (#tab)static private Dictionary<String,Type> (#name) ()
    (#tab){
    (#tab)(#tab)Dictionary<String,Type> map = new Dictionary<String,Type>();(#block)
    (#tab)(#tab)return map;
    (#tab)}
	]]></template>
	<template key="runtime.alias.basic"><![CDATA[(#brk)(#tab)(#tab)map.Add("(#name)", typeof((#type)));]]></template>
	<template key="runtime.alias.list"><![CDATA[(#brk)(#tab)(#tab)map.Add("(#name)", typeof((#type)<>));]]></template>
	<template key="runtime.alias.map"><![CDATA[(#brk)(#tab)(#tab)map.Add("(#name)", typeof((#type)<,>));]]></template>
	<template key="runtime.body"><![CDATA[
    (#tab)static public InvarReadData MakeXmlReader ()
    (#tab){
    (#tab)(#tab)if (InvarReadData.AliasBasics == null) {
    (#tab)(#tab)(#tab)InvarReadData.AliasBasics = aliasBasic ();
    (#tab)(#tab)(#tab) InvarReadData.AliasEnums = aliasEnum ();
    (#tab)(#tab)(#tab) InvarReadData.AliasStructs = aliasStruct ();
    (#tab)(#tab)}
    (#tab)(#tab) return new InvarReadData ();
    (#tab)}
    (#block)
	]]></template>



</tns:root>
