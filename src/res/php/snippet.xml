<?xml version="1.1" encoding="UTF-8"?>
<tns:root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="invar.template ../snippet.xsd"
  xmlns:tns="invar.template" language="php">

  <!-- Redefine 14 Invar buildin types to adapt Java language -->
  <!-- & &amp; < &lt; > &gt; " &quot; ' &apos; -->
  <redefine>
    <int8 pack="java.lang" type="Byte" initValue="-1"/>
    <int16 pack="java.lang" type="Short" initValue="-1"/>
    <int32 pack="java.lang" type="Integer" initValue="-1"/>
    <int64 pack="java.lang" type="Long" initValue="-1" initSuffix="L"/>
    <uint8 pack="java.lang" type="Integer" initValue="0"/>
    <uint16 pack="java.lang" type="Integer" initValue="0"/>
    <uint32 pack="java.lang" type="Long" initValue="0" initSuffix="L"/>
    <uint64 pack="java.lang" type="Long" initValue="0" initSuffix="L"/>
    <float pack="java.lang" type="Float" initValue="0.0" initSuffix="F"/>
    <double pack="java.lang" type="Double" initValue="0.00"/>
    <string pack="java.lang" type="String" initValue="&apos;&apos;" initPrefix="&apos;" initSuffix="&apos;"/>
    <bool pack="java.lang" type="Boolean" initValue="FALSE"/>
    <vec pack="java.util" type="LinkedList" generic="&lt;?&gt;" initValue=""/>
    <map pack="java.util" type="LinkedHashMap" generic="&lt;?,?&gt;" initValue=""/>
  </redefine>
  <template key="include.self">        <![CDATA[false]]></template>
  <template key="pack.name.nested">    <![CDATA[false]]></template>
  <template key="file.name.lowercase"> <![CDATA[false]]></template>
  <template key="capitalize.pack.head"><![CDATA[false]]></template>
  <template key="method.indent.num">   <![CDATA[1]]></template>
  <template key="one.pack.one.file">   <![CDATA[false]]></template>
  <template key="code.dir.flatten">    <![CDATA[false]]></template>
  <template key="code.dir.prefix">     <![CDATA[]]></template>
  <template key="refer.spec">    <![CDATA[&]]></template>
  <template key="refer.invoke">  <![CDATA[.]]></template>
  <template key="refer.copy">    <![CDATA[(#name) = (#arg);]]></template>
  <template key="refer.const">   <![CDATA[const]]></template>
  <template key="pointer.spec">  <![CDATA[*]]></template>
  <template key="pointer.invoke"><![CDATA[->]]></template>
  <template key="pointer.null">  <![CDATA[NULL]]></template>
  <template key="pointer.copy">  <![CDATA[(#name) = (#arg);]]></template>
  <template key="byte.yes">      <![CDATA[0x01]]></template>
  <template key="byte.non">      <![CDATA[0x00]]></template>
  <template key="file"><![CDATA[
	//===----------------------------*  PHP 5  *-------------------------------===//
    //
    //             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
    //
    //===----------------------------------------------------------------------===//
    <?php
    (#blank)
    (#includes)
    (#pack) ]]></template>
  <template key="file.include"><![CDATA[require_once (#name);(#brk)]]></template>
  <template key="file.pack"><![CDATA[
	namespace (#name);
	(#body) ]]></template>
  <template key="file.body"><![CDATA[
    (#blank)
    (#import)
    (#enums)(#structs) ]]></template>
  <template key="import"><![CDATA[import (#body);(#brk)]]></template>
  <template key="import.body"><![CDATA[(#pack)(#name)]]></template>
  <template key="import.split"><![CDATA[.]]></template>
  <template key="import.exclude.conflict"><![CDATA[true]]></template>
  <template key="import.exclude.same.pack"><![CDATA[true]]></template>
  <template key="import.exclude.packs"><![CDATA[java.lang]]></template>
  <template key="doc"><![CDATA[/** (#doc) */]]></template>
  <template key="doc.line"><![CDATA[ (#space)//(#doc)]]></template>
  <template key="code.assignment"><![CDATA[(#type)(#name) = (#value);(#brk)]]></template>
  <template key="code.definition"><![CDATA[(#type) (#name);(#brk)]]></template>
  <template key="code.indexer"><![CDATA[ //XXX ?(#name).get((#index)) ]]></template>
  <template key="enum.field"><![CDATA[
    (#brk)(#tab)(#doc)
    (#tab)(#name) ((#value), "(#name)"),]]></template>
  <template key="enum"><![CDATA[
    final class (#name)
    {(#body);
    (#blank)
    (#tab)public String  getName  () { return name; }
    (#tab)public Integer getValue () { return value; }
    (#tab)public String  toString () { return name + "(" + value + ")"; }
    (#blank)
    (#tab)private String  name;
    (#tab)private Integer value;
    (#blank)
    (#tab)(#name)(Integer v, String n)
    (#tab){
    (#tab)(#tab)this.name = n;
    (#tab)(#tab)this.value = v;
    (#tab)}
    (#blank)
    (#tab)static public (#name) valueOf(Integer v)
    (#tab){
    (#tab)(#tab)(#name)[] es = (#name).values();
    (#tab)(#tab)for ((#name) e : es)
    (#tab)(#tab){
    (#tab)(#tab)(#tab)if(e.getValue() == v)
    (#tab)(#tab)(#tab)(#tab)return e;
    (#tab)(#tab)}
    (#tab)(#tab)return es[0];
    (#tab)}
    }
  ]]></template>
  <template key="init.any">    <![CDATA[new (#type)]]></template>
  <template key="init.struct"> <![CDATA[new (#type)]]></template>
  <template key="init.enum">   <![CDATA[(#type)::(#name)]]></template>
  <template key="init.vec">    <![CDATA[array()]]></template>
  <template key="init.map">    <![CDATA[array()]]></template>
  <template key="struct"><![CDATA[
    final public class (#name)
    {
    [#codeFields (struct; fields)]
    [#codeGetters(struct; fields)]
    [#codeSetters(struct; fields)]
    [#codeNested (reuse.; useFullName; struct; fields; imports)](#brk)
    [#codeNested (copy.;  useFullName; struct; fields; imports)](#brk)
    [#codeNested (read.;  useFullName; struct; fields; imports)](#brk)
    [#codeNested (write.; useFullName; struct; fields; imports)](#brk)
    [#codeNested (toxml.; useFullName; struct; fields; imports)](#brk)
    [#codeNested (tostr.; useFullName; struct; fields; imports)](#brk)
    }
	]]></template>
  <template key="struct.meta"><![CDATA[@invar.InvarRule(T="(#type)", S="f(#index)")]]></template>
  <template key="struct.field"><![CDATA[
    (#tab)private \$[#clampLen(lenFieldName; 16; (#name) )] = (#value);
    (#concat)[#codeLineDoc(fields; (#index))]
  ]]></template>
  <template key="struct.setter"><![CDATA[
    (#tab)[#codeDoc(fields; (#index))]
    (#tab)public function set[#upperHeadChar( (#name) )](\$value) { \$this->(#name) = \$value; return \$this; }
  ]]></template>
  <template key="struct.getter"><![CDATA[
    (#tab)[#codeDoc(fields; (#index))]
    (#tab)public function get[#upperHeadChar( (#name) )]() { return \$this->(#name); }
  ]]></template>

  <!-- Method Reuse -->
  <template key="reuse.method.arg"><![CDATA[]]></template>
  <template key="reuse.method"><![CDATA[ (#tab)public function reuse()
    (#tab){(#body)
    (#tab)(#tab)return \$this;
    (#tab)} //reuse() ]]></template>
  <template key="reuse.any">   <![CDATA[ [#clampLen(lenFieldName; 16; (#name))] = (#deft) ]]></template>
  <template key="reuse.struct"><![CDATA[ (#name).reuse() ]]></template>
  <template key="reuse.vec | reuse.map"><![CDATA[ (#name).clear() ]]></template>
  <template key="reuse.ref.any"><![CDATA[ (#body); ]]></template>
  <template key="reuse.ptr.any"><![CDATA[
    if ((#name) != (#null)) {
    (#tab)(#name) = (#deft);
    }]]></template>
  <template key="reuse.ptr.struct | reuse.ptr.vec | reuse.ptr.map"><![CDATA[
    if ((#name) != (#null)) {
    (#tab)(#body);
    }]]></template>

  <!-- CopyFrom Method -->
  <template key="copy.method.arg"><![CDATA[\$from]]></template>
  <template key="copy.method"><![CDATA[ (#tab)public (#type) copy (\$from)
    (#tab){
      (#tab)(#tab)if (\$this == \$from || \$from == (#null)) {
      (#tab)(#tab)(#tab)return this;
      (#tab)(#tab)}(#body)
      (#tab)(#tab)return \$this;
    (#tab)} //copy(...)]]></template>
  <template key="copy.any"><![CDATA[ (#arg)(#split)(#name) ]]></template>
  <template key="copy.vec"><![CDATA[ (#name).addAll((#arg)(#split)(#name)) ]]></template>
  <template key="copy.map"><![CDATA[ (#name).putAll((#arg)(#split)(#name)) ]]></template>
  <template key="copy.ref.any"><![CDATA[ (#name) = (#body); ]]></template>
  <template key="copy.ref.vec|copy.ref.map"><![CDATA[ (#name).clear();
    (#body); ]]></template>
  <template key="copy.ptr.any"><![CDATA[ (#name) = (#body);  ]]></template>
  <template key="copy.ptr.struct"><![CDATA[
    if ((#arg).(#name) != (#null)) {
    (#tab)(#name).copy((#body));
    } else {
    (#tab)(#name) = (#null);
    }
  ]]></template>
  <template key="copy.ptr.vec|copy.ptr.map"><![CDATA[
    if ((#arg).(#name) != (#null)) {
    (#tab)(#name).clear();
    (#tab)(#body);
    } else {
    (#tab)(#name) = (#null);
    }
  ]]></template>

  <!-- Read bytes from a Stream -->
  <template key="read.import"><![CDATA[]]></template>
  <template key="read.method.arg"><![CDATA[\$from]]></template>
  <template key="read.method"><![CDATA[
    (#tab)public function read (\$from)
    (#tab){(#body)
    (#tab)(#tab)return this;
    (#tab)}]]></template>
  <template key="read.int8">  <![CDATA[ (#arg).readByte()    ]]></template>
  <template key="read.int16"> <![CDATA[ (#arg).readShort()   ]]></template>
  <template key="read.int32"> <![CDATA[ (#arg).readInt()     ]]></template>
  <template key="read.int64"> <![CDATA[ (#arg).readLong()    ]]></template>
  <template key="read.uint8"> <![CDATA[ (#arg).readUnsignedByte()  ]]></template>
  <template key="read.uint16"><![CDATA[ (#arg).readUnsignedShort() ]]></template>
  <template key="read.uint32"><![CDATA[ (#arg).readInt() & 0xFFFFFFFFL ]]></template>
  <template key="read.uint64"><![CDATA[ (#arg).readLong()    ]]></template>
  <template key="read.float"> <![CDATA[ (#arg).readFloat()   ]]></template>
  <template key="read.double"><![CDATA[ (#arg).readDouble()  ]]></template>
  <template key="read.string"><![CDATA[ (#arg).readUTF()     ]]></template>
  <template key="read.bool">  <![CDATA[ (#arg).readBoolean() ]]></template>
  <template key="read.enum">  <![CDATA[ (#type).valueOf((#arg).readInt()) ]]></template>
  <template key="read.struct"><![CDATA[ (#name).read((#arg)) ]]></template>
  <template key="read.nest.n|read.nest.k|read.nest.v"><![CDATA[ (#type) (#name) = (#body); ]]></template>
  <template key="read.nest.n.struct|read.nest.k.struct|read.nest.v.struct"><![CDATA[
    (#type) (#name) = new (#type)();(#brk)(#body); ]]></template>
  <template key="read.vec.head">  <![CDATA[(#type) (#name) = new (#type)(); //read.vec.head(#brk)]]></template>
  <template key="read.vec.for"><![CDATA[
    Long (#len) = (#arg).readInt() & 0xFFFFFFFFL;
    for ((#sizetype) (#index) = 0L; (#index) < (#len); ++(#index)) {(#body)
    (#tab)(#name).add((#value));
    }
  ]]></template>
  <template key="read.map.head"> <![CDATA[(#type) (#name) = new (#type)(); //read.map.head(#brk)]]></template>
  <template key="read.map.for"><![CDATA[
    Long (#len) = (#arg).readInt() & 0xFFFFFFFFL;
    for ((#sizetype) (#index) = 0L; (#index) < (#len); ++(#index)) {(#body)
    (#tab)(#name).put((#key),(#value));
    }
  ]]></template>
  <template key="read.ref.any"><![CDATA[ (#name) = (#body); ]]></template>
  <template key="read.ref.struct"><![CDATA[ (#body); ]]></template>
  <template key="read.ref.vec"><![CDATA[ (#name).clear();(#brk)(#body) ]]></template>
  <template key="read.ref.map"><![CDATA[ (#name).clear();(#brk)(#body) ]]></template>
  <template key="read.ptr.string"><![CDATA[
    if ((#arg).readByte() == (#byteyes)) {
    (#tab)(#name) = (#body);
    }
  ]]></template>
  <template key="read.ptr.struct"><![CDATA[
    if ((#arg).readByte() == (#byteyes)) {
    (#tab)(#body);
    }
  ]]></template>
  <template key="read.ptr.vec|read.ptr.map"><![CDATA[
    (#name).clear();
    if ((#arg).readByte() == (#byteyes)) {(#bodyindent)
    }
  ]]></template>


  <!-- Write bytes to a Stream -->
  <template key="write.import"><![CDATA[]]></template>
  <template key="write.method.arg"><![CDATA[\$dest]]></template>
  <template key="write.method"><![CDATA[ (#tab)public function write (\$dest)
    (#tab){(#body)
    (#tab)(#tab)return \$this;
    (#tab)} //(#type)::write() ]]></template>
  <template key="write.int8">  <![CDATA[ (#arg) .= pack('c', \$(#name)) ]]></template>
  <template key="write.int16"> <![CDATA[ (#arg) .= pack('n', \$(#name)) ]]></template>
  <template key="write.int32"> <![CDATA[ (#arg) .= pack('N', \$(#name)) ]]></template>
  <template key="write.int64"> <![CDATA[ (#arg) .= pack('NN', \$(#name), 0x00000000) ]]></template>
  <template key="write.uint8"> <![CDATA[ (#arg) .= pack('C', \$(#name)) ]]></template>
  <template key="write.uint16"><![CDATA[ (#arg) .= pack('n', \$(#name)) ]]></template>
  <template key="write.uint32"><![CDATA[ (#arg) .= pack('N', \$(#name)) ]]></template>
  <template key="write.uint64"><![CDATA[ (#arg) .= pack('NN', \$(#name), 0x00000000) ]]></template>
  <template key="write.float"> <![CDATA[ (#arg) .= pack('f', \$(#name)) ]]></template>
  <template key="write.double"><![CDATA[ (#arg) .= pack('d', \$(#name))]]></template>
  <template key="write.string"><![CDATA[ (#arg) .= pack('nA*', strlen(\$(#name)), \$(#name)) ]]></template>
  <template key="write.bool">  <![CDATA[ (#arg) .= pack('c', \$(#name) ? 0x01 : 0x00) ]]></template>
  <template key="write.enum">  <![CDATA[ (#arg) .= pack('N', \$(#name)) ]]></template>
  <template key="write.struct"><![CDATA[ \$(#name).write((#arg)) ]]></template>
  <template key="write.nest.n"><![CDATA[ (#body); ]]></template>
  <template key="write.nest.k"><![CDATA[ (#body); ]]></template>
  <template key="write.nest.v"><![CDATA[ (#body); ]]></template>
  <template key="write.vec.head"><![CDATA[]]></template>
  <template key="write.vec.for"><![CDATA[ (#arg) .= pack('N', count(\$(#name)));
    foreach (\$(#name) as &\$(#value)) {(#body)
    }
    unset(\$(#value)); ]]></template>
  <template key="write.map.head.k"><![CDATA[]]></template>
  <template key="write.map.head.v"><![CDATA[]]></template>
  <template key="write.map.for"><![CDATA[ (#arg) .= pack('N', count(\$(#name)));
    foreach (\$(#name) as \$(#key) => &\$(#value)) {(#body)
    }
    unset(\$(#value)); ]]></template>
  <template key="write.ref.any"><![CDATA[(#body);]]></template>
  <template key="write.ref.vec | write.ref.map"><![CDATA[ (#body) ]]></template>
  <template key="write.ptr.string | write.ptr.struct"><![CDATA[
    if (\$this->(#name) != (#null)) {
    (#tab)(#arg) .= pack('c', (#byteyes));
    (#tab)(#body);
    } else {
    (#tab)(#arg) .= pack('c', (#bytenon));
    }
  ]]></template>
  <template key="write.ptr.vec | write.ptr.map"><![CDATA[
    if (\$this->(#name) != (#null)) {
    (#tab)(#arg) .= pack('c', (#byteyes));(#bodyindent)
    } else {
    (#tab)(#arg) .= pack('c', (#bytenon));
    }
  ]]></template>


  <!-- To XML String -->
  <template key="toxml.import"><![CDATA[]]></template>
  <template key="toxml.method.arg"><![CDATA[$name_]]></template>
  <template key="toxml.method"><![CDATA[ (#tab)public function toStringXml (\$name_)
    (#tab){
    (#tab)(#tab)\$result = '';
    (#tab)(#tab)\$attrs  = '';
    (#tab)(#tab)\$nodes  = '';(#body)
    (#tab)(#tab)\$result .= '<';
    (#tab)(#tab)\$result .= \$name_;
    (#tab)(#tab)\$result .= \$attrs;
    (#tab)(#tab)if (count(\$nodes) == 0) {
    (#tab)(#tab)(#tab)\$result .= '/>';
    (#tab)(#tab)} else {
    (#tab)(#tab)(#tab)\$result .= '>';
    (#tab)(#tab)(#tab)\$result .= \$nodes;
    (#tab)(#tab)(#tab)\$result .= '</';
    (#tab)(#tab)(#tab)\$result .= \$name_;
    (#tab)(#tab)(#tab)\$result .= '>';
    (#tab)(#tab)}
    (#tab)(#tab)return \$result;
    (#tab)} //(#type)::toStringXml(\$name_) ]]></template>
  <template key="toxml.any">   <![CDATA[ (#name) ]]></template>
  <template key="toxml.string"><![CDATA[ (#name) ]]></template>
  <template key="toxml.struct"><![CDATA[ \$(#name)->toStringXml('(#name)') ]]></template>
  <template key="toxml.nest.n.struct"><![CDATA[ \$nodes .= (#body); ]]></template>
  <template key="toxml.nest.k.struct"><![CDATA[
    \$nodes .= (#body); ]]></template>
  <template key="toxml.nest.v.struct"><![CDATA[
    \$nodes .= (#body); ]]></template>
  <template key="toxml.nest.n"><![CDATA[
    \$nodes .= '<(#name) value="';
    \$nodes .= \$(#body);
    \$nodes .= '">'; ]]></template>
  <template key="toxml.nest.k"><![CDATA[
    \$nodes .= '<(#name) value="';
    \$nodes .= \$(#body);
    \$nodes .= '">'; ]]></template>
  <template key="toxml.nest.v"><![CDATA[
    \$nodes .= '<(#name) value="';
    \$nodes .= \$(#body);
    \$nodes .= '">'; ]]></template>
  <template key="toxml.vec.head"><![CDATA[]]></template>
  <template key="toxml.vec.for"><![CDATA[
    \$nodes .= '<(#name)>';
    foreach (\$(#name) as &\$(#value)) {(#body)
    }
    \$nodes .= '</(#name)>';
  ]]></template>
  <template key="toxml.map.head.k"><![CDATA[]]></template>
  <template key="toxml.map.head.v"><![CDATA[]]></template>
  <template key="toxml.map.for"><![CDATA[
    \$nodes .= ('<(#name)>');
    foreach (\$(#name) as \$(#key) => &\$(#value)) {(#body)
    }
    \$nodes .= '</(#name)>';
  ]]></template>
  <template key="toxml.ref.any"><![CDATA[ \$attrs .= ' (#name)="';
    \$attrs .= \$this->(#body);
    \$attrs .= '"'; ]]></template>
  <template key="toxml.ref.struct"><![CDATA[ \$nodes .= (#body); ]]></template>
  <template key="toxml.ref.vec | toxml.ref.map"><![CDATA[ if ((#name).size() > 0) {(#bodyindent)
    }]]></template>
  <template key="toxml.ptr.any"><![CDATA[ if (\$this->(#name) != (#null)) {
    (#tab)\$attrs .= ' (#name)="';
    (#tab)\$attrs .= \$this->(#body);
    (#tab)\$attrs .= '"';
    }]]></template>
  <template key="toxml.ptr.struct"><![CDATA[ if (\$this->(#name) != (#null)) {
    (#tab)\$nodes .= (#body);
    }]]></template>
  <template key="toxml.ptr.vec | toxml.ptr.map"><![CDATA[
    (#concat)if (\$this->(#name) != (#null) && count(\$this->(#name)) > 0) {(#bodyindent)
    }]]></template>


  <!-- To String -->
  <template key="tostr.import"><![CDATA[]]></template>
  <template key="tostr.method.arg"><![CDATA[]]></template>
  <template key="tostr.method"><![CDATA[ (#tab)public function toString ()
    (#tab){
    (#tab)(#tab)\$result  = '';
    (#tab)(#tab)\$result .= '{ ';
    (#tab)(#tab)\$result .= get_class(\$this);(#body)
    (#tab)(#tab)\$result .= ' }';
    (#tab)(#tab)return \$result;
    (#tab)} //(#type)::toString() ]]></template>
  <template key="tostr.any">   <![CDATA[ (#name).toString() ]]></template>
  <template key="tostr.struct"><![CDATA[ '<(#type)>' ]]></template>
  <template key="tostr.vec">   <![CDATA[ '(' . count(\$(#name)) . ')' ]]></template>
  <template key="tostr.map">   <![CDATA[ '[' . count(\$(#name)) . ']' ]]></template>
  <template key="tostr.string"><![CDATA[ '"' . (#name) . '"' ]]></template>
  <template key="tostr.ref.any"><![CDATA[ \$result .= ', (#name):';
    \$result .= (#body); ]]></template>
  <template key="tostr.ptr.any"><![CDATA[ \$result .= ', (#name):';
    if (\$this->(#name) != (#null)) {
      (#tab)\$result .= (#body);
    } else {
      (#tab)\$result .= 'null';
    } ]]></template>


<!--  -->
</tns:root>