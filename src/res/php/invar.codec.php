//===----------------------------*  PHP 5  *-------------------------------===//
//
//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
//
//===----------------------------------------------------------------------===//
<?php

namespace invar;

final class BinaryWriter
{
    private $bytes = NULL;
    
    function __construct (&$data)
    {   
        $this->bytes = $data;
    }

    function __destruct ()
    {
        unset($this->bytes);
    }

    public function writeInt08 ($v)
    {
        $this->bytes .= pack('c', $v);   
    }
    public function writeInt16 ($v)
    {
        $this->bytes .= pack('n', $v);   
    }
    public function writeInt32 ($v)
    {
        $this->bytes .= pack('N', $v);   
    }
    public function writeInt64 ($v)
    {
        $this->bytes .= pack('NN', $v, 0x00000000);   
    }
    public function writeUInt08 ($v)
    {
        $this->bytes .= pack('c', $v);   
    }
    public function writeUInt16 ($v)
    {
        $this->bytes .= pack('n', $v);   
    }
    public function writeUInt32 ($v)
    {
        $this->bytes .= pack('N', $v);
    }
    public function writeUInt64 ($v)
    {
        $this->bytes .= pack('NN', $v, 0x00000000);   
    }
    public function writeFloat32 ($v)
    {
        $this->bytes .= pack('f', $v);
    }
    public function writeFloat64 ($v)
    {
        $this->bytes .= pack('d', $v);
    }
    public function writeBoolean ($v)
    {
        $this->bytes .= $v == TRUE ? '\x01' : '\x00';   
    }
    public function writeUTF ($v)
    {
        $this->bytes .= pack('nA*', strlen($v), $name);   
    }
}

final class BinaryReader
{
    const EOF = 'EOF Error';
    private $bytes = NULL;
    private $bytesPos = 1;
    private $bytesLen = 0;

    function __construct($data)
    {
        //$data The packed data.
        $this->bytes = unpack ( "C*", $data ); // index begin from 1.
        $this->bytesLen = count ( $bytes );
    }

    function __destruct()
    {
        //print "Destroying DataInput...\n";
        $this->bytes = NULL;
        $this->bytesLen = 0;
        $this->bytesPos = 1;
    }

    function checkAvailable($offset)
    {
        if ($this->bytesPos + $offset > $this->bytesLen) {
            throw new Exception ( EOF );
        }
    }

    public function readInt08()
    {
        $this->checkAvailable ( 1 );
        $result = $this->bytes [$this->bytesPos];
        $this->bytesPos ++;
        return $result;
    }

    public function readInt16()
    {
        $this->checkAvailable ( 2 );
        $b1 = $this->bytes [$this->bytesPos];
        $this->bytesPos ++;
        $b2 = $this->bytes [$this->bytesPos];
        $this->bytesPos ++;
        return ($b1 << 8) | $b2;
    }

    public function readInt32()
    {
        $this->checkAvailable ( 4 );
        $b1 = $this->bytes [$this->bytesPos];
        $this->bytesPos ++;
        $b2 = $this->bytes [$this->bytesPos];
        $this->bytesPos ++;
        $b3 = $this->bytes [$this->bytesPos];
        $this->bytesPos ++;
        $b4 = $this->bytes [$this->bytesPos];
        $this->bytesPos ++;
        return ($b1 << 24) | ($b2 << 16) | ($b3 << 8) | $b4;
    }

    public function readInt64()
    {
        $this->checkAvailable ( 8 );
        $i = 0;
        $result = '';
        while ( $i < 8 ) {
            $bi = $this->bytes [$this->bytesPos];
            $this->bytesPos ++;
            $result .= dechex ( $bi );
        }
        return $result;
    }

    public function readUInt08()
    {
        $this->checkAvailable ( 1 );
        $result = $this->bytes [$this->bytesPos];
        $this->bytesPos ++;
    }

    public function readUInt16()
    {
        $this->checkAvailable ( 2 );
        $b1 = $this->bytes [$this->bytesPos];
        $this->bytesPos ++;
        $b2 = $this->bytes [$this->bytesPos];
        $this->bytesPos ++;
        return ($b1 << 8) | $b2;
    }

    public function readUInt32()
    {
        $this->checkAvailable ( 4 );
        $b1 = $this->bytes [$this->bytesPos];
        $this->bytesPos ++;
        $b2 = $this->bytes [$this->bytesPos];
        $this->bytesPos ++;
        $b3 = $this->bytes [$this->bytesPos];
        $this->bytesPos ++;
        $b4 = $this->bytes [$this->bytesPos];
        $this->bytesPos ++;
        return ($b1 << 24) | ($b2 << 16) | ($b3 << 8) | $b4;
    }

    public function readUInt64()
    {
        $this->checkAvailable ( 8 );
        $i = 0;
        $result = '';
        while ( $i < 8 ) {
            $bi = $this->bytes [$this->bytesPos];
            $this->bytesPos ++;
            $result .= dechex ( $bi );
        }
        return $result;
    }

    public function readBoolean()
    {
        $this->checkAvailable ( 1 );
        $b1 = $this->bytes [$this->bytesPos];
        $this->bytesPos ++;
        return $b1 == 0 ? FALSE : TRUE;
    }

    public function readSingle() {
        /* s（sign）；e（exponent）；m （mantissa） */
        $bits = $this->readInt32 ();
        $s = ($bits >> 31) == 0 ? 1 : - 1;
        $e = ($bits >> 23) & 0xff;
        $m = ($e == 0) ? ($bits & 0x007fffff) << 1 : ($bits & 0x007fffff) | 0x800000;
        return $s * $m * pow ( 2, $e - 150 );
    }
    public function readDouble() {
        $this->checkAvailable ( 8 );
        $this->bytesPos += 8;
        //TODO  readDouble()
        return 0;
    }
    public function readString() {
    }
}
