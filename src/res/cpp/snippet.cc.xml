<?xml version="1.1" encoding="UTF-8"?>
<tns:root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="invar.template ../snippet.xsd"
  xmlns:tns="invar.template" language="cpp">
  
  <template key="pack.name.nested"><![CDATA[true]]></template>
  <template key="file.name.lowercase"><![CDATA[true]]></template>
  <template key="capitalize.pack.head"><![CDATA[false]]></template>
  <template key="method.indent.num"><![CDATA[0]]></template>
  
  <template key="one.pack.one.file"><![CDATA[false]]></template>
  <template key="code.dir.flatten"><![CDATA[true]]></template>
  <template key="code.dir.prefix"><![CDATA[impl/]]></template>
  
  <template key="file"><![CDATA[
	(#blank)
	//===----------------------------*  CPP  *---------------------------------===//
	//
	//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
	//
	//===----------------------------------------------------------------------===//
	(#blank)
	#ifndef _(#define)_IMPL_
	#define _(#define)_IMPL_
	(#blank)
	(#includes)
	(#pack)
	(#blank)
	#endif //_(#define)_IMPL_]]></template>
  
  <template key="file.include"><![CDATA[#include (#name)(#brk)]]></template>
 
  <template key="file.pack"><![CDATA[
	namespace (#name) { (#body)
	} //namespace: (#name)]]></template>
  
  <template key="file.body"><![CDATA[
	(#blank)
	(#import)(#enums)(#structs)]]></template>
  
  
  
  
  <!-- Common snippet -->
  <template key="doc"><![CDATA[/* (#doc). */]]></template>
  <template key="doc.line"><![CDATA[// (#doc).]]></template>
  <template key="import"><![CDATA[using namespace (#body);(#brk)]]></template>
  <template key="import.body"><![CDATA[(#pack)]]></template>
  <template key="import.split"><![CDATA[::]]></template>
  
  <template key="init.struct"><![CDATA[new (#type)()]]></template>
  <template key="init.enum"><![CDATA[(#type).(#name)]]></template>
  <template key="code.invoker"><![CDATA[.]]></template>
  <template key="code.assignment"><![CDATA[(#type)(#name) = (#value);]]></template>
  <template key="code.definition"><![CDATA[(#type) (#name);(#brk)]]></template>
  <template key="code.indexer"><![CDATA[ (#name)[(#index)] ]]></template>
  <template key="code.fori.itype"><![CDATA[int32]]></template>
  <template key="code.fori"><![CDATA[
  for ((#type) (#index) = 0; (#index) < (#len); (#index)++)
  {(#body)
  }
  ]]></template>
  <template key="code.foreach"><![CDATA[
  foreach ((#type) (#name) in (#nameupper))
  {(#body)
  }
  ]]></template>

  <template key="struct"><![CDATA[
	(#blank)
	(#name)::~(#name)()
	{
	}
	(#blank)
	(#name)::(#name)()
	{
	}
	(#blank)
	(#name)::(#name)(const (#name) &from)
	{
		(#tab)if (this != &from) { CopyFrom(from); }
	}
	(#blank)
	(#name)& (#name)::operator = (const (#name) &from)
	{
		(#tab)if (this != &from) { CopyFrom(from); }
		(#tab)return *this;
	}
	(#blank)	
	
	(#getters)
	(#setters)
	
	//(#copyfrom)
	(#encoder)
	(#decoder)
	
  ]]></template>
  
  <template key="struct.meta"><![CDATA[ [Invar.InvarRule("(#type)", "(#name)")] ]]></template>
  <template key="struct.field"><![CDATA[
  (#tab) (#type) (#name) = (#value);(#doc)(#brk)]]></template>
  <template key="struct.setter"><![CDATA[
    	(#typehost)& (#typehost)::Set(#nameupper)((#type) value) { (#name) = value; return *this; }
	]]></template>
  <template key="struct.getter"><![CDATA[
    	const (#type) (#typehost)::Get(#nameupper)() const { return (#name); }
	]]></template>

  
  <!-- Read bytes from a Stream -->
  <template key="read.import"><![CDATA[System.IO]]></template>
  <template key="read.method"><![CDATA[
  (#type)& (#type)::Decode(BinaryReader& stream)
  {(#body)
  (#tab)return *this;
  }
  ]]></template>
  <template key="read.int8"><![CDATA[(#name) = stream.ReadSByte();]]></template>
  <template key="read.int16"><![CDATA[(#name) = stream.ReadInt16();]]></template>
  <template key="read.int32"><![CDATA[(#name) = stream.ReadInt32();]]></template>
  <template key="read.int64"><![CDATA[(#name) = stream.ReadInt64();]]></template>
  <template key="read.uint8"><![CDATA[(#name) = stream.ReadByte();]]></template>
  <template key="read.uint16"><![CDATA[(#name) = stream.ReadUInt16();]]></template>
  <template key="read.uint32"><![CDATA[(#name) = stream.ReadUInt32();]]></template>
  <template key="read.uint64"><![CDATA[(#name) = stream.ReadUInt64();]]></template>
  <template key="read.float"><![CDATA[(#name) = stream.ReadSingle();]]></template>
  <template key="read.double"><![CDATA[(#name) = stream.ReadDouble();]]></template>
  <template key="read.string"><![CDATA[(#name) = stream.ReadString();]]></template>
  <template key="read.bool"><![CDATA[(#name) = stream.ReadBoolean();]]></template>
  <template key="read.enum"><![CDATA[(#name) = ((#type))Enum.ToObject(typeof((#type)), stream.ReadInt32());]]></template>
  <template key="read.struct"><![CDATA[(#name).Decode(stream);]]></template>
  <template key="read.struct.check"><![CDATA[
  if (stream.ReadByte() == 0x01)
  {
  (#tab)if ((#name) == null)
  (#tab)(#tab)(#name) = new (#type)();
  (#tab)(#name).Read(stream);
  }
  ]]></template>
  <template key="read.size.init"><![CDATA[stream.ReadInt32();]]></template>
  <template key="read.vec"><![CDATA[(#name).Add((#value));]]></template>
  <template key="read.map"><![CDATA[(#nameupper).Add((#name),(#value));]]></template>
  <template key="read.vec.for"><![CDATA[
  int32_t (#len) = stream.ReadInt32();
  for ((#sizetype) (#index) = 0; (#index) < (#len); (#index)++) //read.vec.for
  {(#body)
  (#tab)(#name).Add((#value));
  }
  ]]></template>
  <template key="read.map.keys"><![CDATA[]]></template>
  <template key="read.map.for"><![CDATA[
  int32_t (#len) = stream.ReadInt32();
  for ((#sizetype) (#index) = 0; (#index) < (#len); (#index)++) //read.map.for
  {(#body)
  (#tab)(#name).Add((#key),(#value));
  }
  ]]></template>
  
  
  <!-- Write bytes to a Stream -->
  <template key="write.import"><![CDATA[System.IO,System]]></template>
  <template key="write.method"><![CDATA[
  (#type)& (#type)::Encode(BinaryWriter& stream)
  {(#body)
  (#tab)return *this;
  }
  ]]></template>
  <template key="write.int8"><![CDATA[stream.Write((#name));]]></template>
  <template key="write.int16"><![CDATA[stream.Write((#name));]]></template>
  <template key="write.int32"><![CDATA[stream.Write((#name));]]></template>
  <template key="write.int64"><![CDATA[stream.Write((#name));]]></template>
  <template key="write.uint8"><![CDATA[stream.Write((#name));]]></template>
  <template key="write.uint16"><![CDATA[stream.Write((#name));]]></template>
  <template key="write.uint32"><![CDATA[stream.Write((#name));]]></template>
  <template key="write.uint64"><![CDATA[stream.Write((#name));]]></template>
  <template key="write.float"><![CDATA[stream.Write((#name));]]></template>
  <template key="write.double"><![CDATA[stream.Write((#name));]]></template>
  <template key="write.string"><![CDATA[stream.Write((#name));]]></template>
  <template key="write.bool"><![CDATA[stream.Write((#name));]]></template>
  <template key="write.enum"><![CDATA[stream.Write((Int32)(#name));]]></template>
  <template key="write.struct"><![CDATA[(#name).Encode(stream);]]></template>
  <template key="write.struct.check"><![CDATA[
  if ((#name) != null)
  {
  (#tab)stream.Write((Byte)0x01);
  (#tab)(#name).Write(stream);
  }
  else
  {
  (#tab)stream.Write((Byte)0x00);
  }
  ]]></template>
  <template key="write.size.init"><![CDATA[(#name).Count]]></template>
  <template key="write.vec.for"><![CDATA[
  int32_t (#len) = (#name).Count;
  stream.Write((#len));
  for ((#sizetype) (#index) = 0; (#index) < (#len); (#index)++) //write.vec.for
  {(#body)
  }
  ]]></template>
  <template key="write.map.keys"><![CDATA[Keys]]></template>
  <template key="write.map.for"><![CDATA[
  int32_t (#len) = (#nameupper).Count;
  stream.Write((#len));
  foreach ((#type) (#name) in (#nameupper).Keys) //write.map.for
  {(#body)
  }
  ]]></template>
  
  
  
  <!-- Output data to xml -->
  <template key="toxml.import"><![CDATA[System.Text]]></template>
  <template key="toxml.method"><![CDATA[
  (#tab)public (#type) ToXML(String nodeName)
  (#tab){
  (#tab)(#tab)StringBuilder code = new StringBuilder ();
  (#body)
  (#tab)(#tab)return code.ToString();
  (#tab)}
  ]]></template>
</tns:root>