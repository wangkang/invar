<?xml version="1.1" encoding="UTF-8"?>
<tns:root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="invar.template ../snippet.xsd"
  xmlns:tns="invar.template" language="cpp">
  
  <export resPath="/res/cpp/invar.codec.h" destDir="" destName="invar.codec.h"/>
  
  <redefine>
    <int8 include="&lt;cstdint&gt;" pack="" type="std::int8_t" initValue="-1"/>
    <int16 include="&lt;cstdint&gt;" pack="" type="std::int16_t" initValue="-1"/>
    <int32 include="&lt;cstdint&gt;" pack="" type="std::int32_t" initValue="-1"/>
    <int64 include="&lt;cstdint&gt;" pack="" type="std::int64_t" initValue="-1"/>
    <uint8 include="&lt;cstdint&gt;" pack="" type="std::uint8_t" initValue="0"/>
    <uint16 include="&lt;cstdint&gt;" pack="" type="std::uint16_t" initValue="0"/>
    <uint32 include="&lt;cstdint&gt;" pack="" type="std::uint32_t" initValue="0"/>
    <uint64 include="&lt;cstdint&gt;" pack="" type="std::uint64_t" initValue="0" initSuffix="L"/>
    <float pack="" type="float" initValue="0.0" initSuffix="F"/>
    <double pack="" type="double" initValue="0.00"/>
    <string include="&lt;string&gt;" pack="" type="std::string" initValue="&quot;&quot;" initPrefix="&quot;" initSuffix="&quot;"/>
    <bool pack="" type="bool" initValue="false"/>
    <vec include="&lt;vector&gt;" pack="" type="std::vector" generic=" &lt; ? &gt;" initValue=""/>
    <map include="&lt;map&gt;" pack="" type="std::map" generic=" &lt; ?, ? &gt;" initValue=""/>
    <ghost include="&quot;invar.codec.h&quot;" pack="invar" type="BinaryWriter" generic="" initValue=""/>
    <ghost include="&quot;invar.codec.h&quot;" pack="invar" type="BinaryReader" generic="" initValue=""/>
  </redefine>
  
  <template key="trace.all.types"><![CDATA[true]]></template>
  <template key="pack.name.nested"><![CDATA[true]]></template>
  <template key="file.name.lowercase"><![CDATA[true]]></template>
  <template key="capitalize.pack.head"><![CDATA[false]]></template>
  <template key="method.indent.num"><![CDATA[0]]></template>
  
  <template key="one.pack.one.file"><![CDATA[false]]></template>
  <template key="code.dir.flatten"><![CDATA[true]]></template>
  <template key="code.dir.prefix"><![CDATA[include/]]></template>
  
  
  <template key="null.struct"><![CDATA[NULL]]></template>
  <template key="null.byte.yes"><![CDATA[(std::int8_t)0x01]]></template>
  <template key="null.byte.no"><![CDATA[(std::int8_t)0x00]]></template>
  <template key="type.enum"><![CDATA[int32]]></template>
  <template key="file"><![CDATA[
	(#blank)
	//===----------------------------*  C++  *---------------------------------===//
	//
	//             THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
	//
	//===----------------------------------------------------------------------===//
	(#blank)
	#ifndef (#define)_
	#define (#define)_
	(#blank)
	#include "include/invar.codec.h"
	(#includes)
	(#pack)
	(#blank)
	#endif //(#define)_]]></template>
 
  <template key="file.include"><![CDATA[#include (#name)(#brk)]]></template>
  
  <template key="file.pack"><![CDATA[
	namespace (#name) {
	(#body)
	}; //namespace: (#name)]]></template>
  
  <template key="file.body"><![CDATA[
	(#blank)
	using namespace invar;
	(#import)(#enums)(#structs)]]></template>
  
  <template key="enum"><![CDATA[
	(#brk)(#doc)
	enum (#name) : std::int32_t
	{
		(#blank)
		(#body)
	}; //enum: (#name)
  ]]></template>
	
  <template key="enum.field"><![CDATA[
	(#tab)(#name) = (#value),(#doc)
  ]]></template>
  
  <template key="struct"><![CDATA[
    (#brk)(#doc)
	class (#name)
	{
	(#tab)public:
	
	(#blank)
	(#tab)~(#name)();
	(#tab)(#name)();
	(#tab)(#name)(const (#name) &from);
	(#tab)(#name)& operator = (const (#name) &from);
	
	(#blank)
	(#tab)(#name)& CopyFrom(const (#name) &from);
	(#tab)(#name)& Encode(BinaryWriter &stream);
	(#tab)(#name)& Decode(BinaryReader &stream);
	
	(#blank)
	(#setters)
	(#getters)
	(#tab)private:
	(#blank)
	(#fields)
	}; //class: (#name)
  ]]></template>
  
  <template key="struct.meta"><![CDATA[ [InvarRule("(#type)", "(#name)")] ]]></template>
  
  <template key="struct.field"><![CDATA[
	(#tab)(#type) (#name); (#doc)
  ]]></template>
  
  <template key="struct.setter"><![CDATA[
	(#tab)(#typehost)& Set(#nameupper)((#type) value);
  ]]></template>
  
  <template key="struct.getter"><![CDATA[
	(#tab)const (#type) Get(#nameupper)() const; (#doc)
  ]]></template>
  
  <!-- Common snippet -->
  <template key="doc"><![CDATA[/* (#doc) */]]></template>
  <template key="doc.line"><![CDATA[// (#doc)]]></template>
  <template key="import"><![CDATA[using namespace (#body);(#brk)]]></template>
  <template key="import.body"><![CDATA[(#pack)]]></template>
  <template key="import.split"><![CDATA[::]]></template>
  <template key="init.struct"><![CDATA[new (#type)()]]></template>
  <template key="init.enum"><![CDATA[(#type).(#name)]]></template>
  <template key="code.invoker"><![CDATA[.]]></template>
  <template key="code.assignment"><![CDATA[(#type)(#name) = (#value);]]></template>
  <template key="code.definition"><![CDATA[(#type)(#name);]]></template>
  
</tns:root>