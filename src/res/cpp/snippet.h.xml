<?xml version="1.1" encoding="UTF-8"?>
<tns:root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="invar.template ../snippet.xsd"
  xmlns:tns="invar.template" language="cpp">
  
  <!-- Redefine 14 Invar buildin types to adapt current language  -->
  <redefine>
    <int8 pack="std" type="int8_t" initValue="-1"/>
    <int16 pack="std" type="int16_t" initValue="-1"/>
    <int32 pack="std" type="int32_t" initValue="-1"/>
    <int64 pack="std" type="int64_t" initValue="-1" initSuffix="L"/>
    <uint8 pack="std" type="uint8_t" initValue="0"/>
    <uint16 pack="std" type="uint16_t" initValue="0"/>
    <uint32 pack="std" type="uint32_t" initValue="0"/>
    <uint64 pack="std" type="uint64_t" initValue="0" initSuffix="L"/>
    <float pack="" type="float" initValue="0.0" initSuffix="F"/>
    <double pack="" type="double" initValue="0.00"/>
    <string pack="std" type="string" initValue="&quot;&quot;" initPrefix="&quot;" initSuffix="&quot;"/>
    <bool pack="std" type="bool" initValue="false"/>
    <vec pack="std" type="vector" generic="&lt;?&gt;" initValue=""/>
    <map pack="std" type="map" generic="&lt;?,?&gt;" initValue=""/>
  </redefine>
  
  <template key="pack.name.nested"><![CDATA[true]]></template>
  <template key="capitalize.pack.head"><![CDATA[false]]></template>
  <template key="code.dir.flatten"><![CDATA[true]]></template>
  <template key="one.pack.one.file"><![CDATA[false]]></template>
  <template key="method.indent.num"><![CDATA[0]]></template>
  
  <template key="file"><![CDATA[
	// THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
	(#blank)
	#ifndef _(#define)_H_
	#define _(#define)_H_
	(#blank)
	(#pack)
	(#blank)
	#endif //_(#define)_H_]]></template>
 
  <template key="file.pack"><![CDATA[
	namespace (#name) {
	(#body)
	} //namespace: (#name)]]></template>
  
  <template key="file.body"><![CDATA[
	(#blank)
	(#import)(#enums)(#structs)]]></template>
  
  
  
  <!-- Common snippet -->
  <template key="doc"><![CDATA[/* (#doc) */]]></template>
  <template key="doc.line"><![CDATA[// (#doc)]]></template>
  <template key="import"><![CDATA[using (#body);(#brk)]]></template>
  <template key="import.body"><![CDATA[(#pack)]]></template>
  <template key="import.split"><![CDATA[::]]></template>
  
  <template key="init.struct"><![CDATA[new (#type)()]]></template>
  <template key="init.enum"><![CDATA[(#type).(#name)]]></template>
  <template key="code.invoker"><![CDATA[.]]></template>
  <template key="code.assignment"><![CDATA[(#type)(#name) = (#value);]]></template>
  <template key="code.definition"><![CDATA[(#type)(#name);]]></template>
  

  
  <template key="pack"><![CDATA[
   		// THIS FILE IS GENERATED BY INVAR. DO NOT EDIT !!!
   		(#blank)
        #ifndef (#namemacro)_H
        #define (#namemacro)_H
   		(#blank)
   		(#import)
   		
   		namespace (#name) {
	 		(#body)
	 		(#blank)
	 	} // namespace (#name)
		
		(#blank)
	    #endif // (#namemacro)_H
	]]></template>
	
  <template key="enum"><![CDATA[
	    (#brk)(#doc)
		public enum (#name) : std::int32_t
		{
			(#body)
		} // enum (#name)
	]]></template>
  <template key="enum.field"><![CDATA[
		(#brk)(#tab)(#doc)
		(#tab)(#name) = (#value),
	]]></template>
  <template key="struct"><![CDATA[
	    (#brk)(#doc)
		class (#name)
		{
		(#tab)public:
		
		(#blank)
		(#tab)(#name)();
		(#tab)~(#name)();
		(#tab)(#name)(const (#name) &from);
		(#tab)(#name)& operator = (const (#name) &from);
		(#tab)(#name)& CopyFrom(const (#name) &from);
		(#blank)
		
		(#setters)
		(#getters)
		
		(#tab)private:
		(#blank)
		(#fields)
			
		} // class (#name)
	]]></template>
  <template key="struct.meta"><![CDATA[ [InvarRule("(#type)", "(#name)")] ]]></template>
  <template key="struct.field"><![CDATA[
  		(#tab)(#type) (#name); (#doc)
  ]]></template>
  <template key="struct.setter"><![CDATA[
		(#tab)(#typehost)& Set(#nameupper)((#type) value);
	]]></template>
  <template key="struct.getter"><![CDATA[
    	(#tab)const (#type) Get(#nameupper)() const; (#doc)
	]]></template>
	
  
  
</tns:root>